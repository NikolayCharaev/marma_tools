import { IApplication } from '@/types/tools';
import { getCurrentDateTime } from '@/utils/day';
import { create } from 'zustand';
import { devtools } from 'zustand/middleware';

import { toast } from 'react-toastify';

export const useApplicationStore = create(
  devtools((set: any, get: any) => ({
    allApplications: [],
    pageType: '',
    setPageType: (page: string) => {
      set({ pageType: page });
    },
    fetchAllApplications: async (pond: string) => {
      const response = await fetch(pond);
      const applications = await response.json();
      set({ allApplications: applications });
    },
    fetchPostApplication: async (pond: string, post: IApplication) => {
      await toast.promise(
        fetch(pond, {
          method: 'POST',
          body: JSON.stringify({
            applicationName: post.applicationName,
            more: post.more,
            imageUrl: post.imageUrl,
            date: post.date,
          }),
        }),
        {
          pending: '–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞—è–≤–∫–∏',
          success: '–ó–∞—è–≤–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ üëå',
          error: '–û—à–∏–±–∫–∞  ü§Ø',
        },
      );
      // –í—ã–∑—ã–≤–∞–µ–º fetchAllApplications –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞

      // @ts-ignore
      get().fetchAllApplications(`/api/${get().pageType}/`);
    },
    fetchPatchApplication: async (pond: string, post: IApplication, postId: string) => {
      await fetch(pond, {
        method: 'PATCH',
        body: JSON.stringify({
          applicationName: post.applicationName,
          more: post.more,
          imageUrl: post.imageUrl,
          date: getCurrentDateTime(),
          id: postId,
        }),
      });
      // –í—ã–∑—ã–≤–∞–µ–º fetchAllApplications –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Å—Ç–∞
      // @ts-ignore
      get().fetchAllApplications(`/api/${get().pageType}/`);
    },
  })),
);
